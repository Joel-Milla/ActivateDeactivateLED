
006ActivateDeactivateLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000148  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d0  080002d8  000012d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d0  080002d0  000012d8  2**0
                  CONTENTS
  4 .ARM          00000000  080002d0  080002d0  000012d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d0  080002d8  000012d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d0  080002d0  000012d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002d4  080002d4  000012d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000012d8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000015b  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000bc  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000001b  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00001538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000002c  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f64  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000004c5  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003ca5  00000000  00000000  000029d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0000667a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000004c  00000000  00000000  000066c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000c1  00000000  00000000  0000670c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002b8 	.word	0x080002b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002b8 	.word	0x080002b8

080001c8 <main>:
	uint32_t volatile *pOutputRegisterGPIOD = (uint32_t*) 0x40020C14; // Address to configure the turning on/off of LEDs


	// Enable the clock for GPOID and GPOIA peripheral in the AHB1EN
	// Use the RCC to enable the clock for GPOID and GPOIA to allow of passage of voltage/information
	*pClockAddress |= (1 << 3); // Activate clock in GPIOD to pass voltage to turn on the LEDs
 80001c8:	4a12      	ldr	r2, [pc, #72]	@ (8000214 <main+0x4c>)
	*pClockAddress |= (1 << 0); // Activate clock in GPIOA to pass voltage to read the data from the pin

	// Configure PD12 as output
	*pModeRegisterGPIOD |= (0b01010101 << 24); // Set the from bit 24 onwards to 01, meaning PD12->PD15 are on output mode...
 80001ca:	4b13      	ldr	r3, [pc, #76]	@ (8000218 <main+0x50>)
	*pClockAddress |= (1 << 3); // Activate clock in GPIOD to pass voltage to turn on the LEDs
 80001cc:	f8d2 1830 	ldr.w	r1, [r2, #2096]	@ 0x830
 80001d0:	f041 0108 	orr.w	r1, r1, #8
 80001d4:	f8c2 1830 	str.w	r1, [r2, #2096]	@ 0x830
	*pClockAddress |= (1 << 0); // Activate clock in GPIOA to pass voltage to read the data from the pin
 80001d8:	f8d2 1830 	ldr.w	r1, [r2, #2096]	@ 0x830
 80001dc:	f041 0101 	orr.w	r1, r1, #1
 80001e0:	f8c2 1830 	str.w	r1, [r2, #2096]	@ 0x830
	*pModeRegisterGPIOD |= (0b01010101 << 24); // Set the from bit 24 onwards to 01, meaning PD12->PD15 are on output mode...
 80001e4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80001e8:	f042 42aa 	orr.w	r2, r2, #1426063360	@ 0x55000000
 80001ec:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
	// meaning will be able to output/turnOn the LED

	// Configure PA0 as input mode
	*pModeRegisterGPIOA &= ~(3 << 0); // Clear the first two positions of the port a, to set those as INPUT mode
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	f022 0203 	bic.w	r2, r2, #3
 80001f6:	601a      	str	r2, [r3, #0]

	// Turn on/of the LED
	while(1) {
		uint8_t pintStatus = (uint8_t) (*pModeInputGPIOA & 0x1); // If the first bit is on, it means that voltage is passing through the ping
 80001f8:	691a      	ldr	r2, [r3, #16]

		if (pintStatus) {
 80001fa:	f012 0f01 	tst.w	r2, #1
			*pOutputRegisterGPIOD |= (0b1111 << 12); // Activate the LEDs that listen on port 12 onwards (4 LEDs)
 80001fe:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
 8000202:	bf14      	ite	ne
 8000204:	f442 4270 	orrne.w	r2, r2, #61440	@ 0xf000
		} else {
			*pOutputRegisterGPIOD &= ~(0b1111 << 12); // Use the mask to deactivate only the LEDs that listen on ports 12-15
 8000208:	f422 4270 	biceq.w	r2, r2, #61440	@ 0xf000
 800020c:	f8c3 2c14 	str.w	r2, [r3, #3092]	@ 0xc14
 8000210:	e7f2      	b.n	80001f8 <main+0x30>
 8000212:	bf00      	nop
 8000214:	40023000 	.word	0x40023000
 8000218:	40020000 	.word	0x40020000

0800021c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800021c:	480d      	ldr	r0, [pc, #52]	@ (8000254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000220:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480c      	ldr	r0, [pc, #48]	@ (8000258 <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490d      	ldr	r1, [pc, #52]	@ (800025c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0a      	ldr	r4, [pc, #40]	@ (8000268 <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024a:	f000 f811 	bl	8000270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024e:	f7ff ffbb 	bl	80001c8 <main>

08000252 <LoopForever>:

LoopForever:
  b LoopForever
 8000252:	e7fe      	b.n	8000252 <LoopForever>
  ldr   r0, =_estack
 8000254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800025c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000260:	080002d8 	.word	0x080002d8
  ldr r2, =_sbss
 8000264:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000268:	2000001c 	.word	0x2000001c

0800026c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC_IRQHandler>
	...

08000270 <__libc_init_array>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	4d0d      	ldr	r5, [pc, #52]	@ (80002a8 <__libc_init_array+0x38>)
 8000274:	4c0d      	ldr	r4, [pc, #52]	@ (80002ac <__libc_init_array+0x3c>)
 8000276:	1b64      	subs	r4, r4, r5
 8000278:	10a4      	asrs	r4, r4, #2
 800027a:	2600      	movs	r6, #0
 800027c:	42a6      	cmp	r6, r4
 800027e:	d109      	bne.n	8000294 <__libc_init_array+0x24>
 8000280:	4d0b      	ldr	r5, [pc, #44]	@ (80002b0 <__libc_init_array+0x40>)
 8000282:	4c0c      	ldr	r4, [pc, #48]	@ (80002b4 <__libc_init_array+0x44>)
 8000284:	f000 f818 	bl	80002b8 <_init>
 8000288:	1b64      	subs	r4, r4, r5
 800028a:	10a4      	asrs	r4, r4, #2
 800028c:	2600      	movs	r6, #0
 800028e:	42a6      	cmp	r6, r4
 8000290:	d105      	bne.n	800029e <__libc_init_array+0x2e>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f855 3b04 	ldr.w	r3, [r5], #4
 8000298:	4798      	blx	r3
 800029a:	3601      	adds	r6, #1
 800029c:	e7ee      	b.n	800027c <__libc_init_array+0xc>
 800029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a2:	4798      	blx	r3
 80002a4:	3601      	adds	r6, #1
 80002a6:	e7f2      	b.n	800028e <__libc_init_array+0x1e>
 80002a8:	080002d0 	.word	0x080002d0
 80002ac:	080002d0 	.word	0x080002d0
 80002b0:	080002d0 	.word	0x080002d0
 80002b4:	080002d4 	.word	0x080002d4

080002b8 <_init>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr

080002c4 <_fini>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr
